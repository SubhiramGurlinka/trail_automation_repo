<?xml version="1.0" encoding="UTF-8"?>
<BES xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="BES.xsd">
	<Fixlet>
		<Title>OracleDB 19c on Solaris-SPARC - 2024-07 Patch</Title>
		<Description><![CDATA[<P><FONT color=#0000ff size=2>Oracle standalone DB 19c <STRONG>Patch</STRONG> for 2024-07</FONT></P>
<P>This fixlet performs the following operations (if any of the operations fail, patching will stop to let you fix the problem and re-run the fixlet):</P>
<OL>
<LI>Downloads the 36522340 combo patch and the OPatch 12.2.0.1.43 update, unless they have already been downloaded.</LI>
<LI>Runs the same prechecks as the Oracle 19c Precheck 2024-07 task, which includes updating OPatch to the current version 12.2.0.1.43.</LI>
<LI>Stops the Oracle 19c listeners and databases.</LI>
<LI>Applies the 36582781 PSU binary patch and database patch.</LI>
<LI>Applies the 36414915 OJVM binary patch and database patch.</LI>
<LI>Restarts the databases and listeners.</LI>
<LI>Performs some basic consistency postchecks.</LI>
</OL>
<P>THE 'UPDATE ORACLE PATCH LIST' TASK MUST BE DEPLOYED PRIOR TO DEPLOYING THIS FIXLET.</P>
<P><FONT color=#ff0000><STRONG>IMPORTANT:</STRONG>  Check the properties in the <STRONG>Oracle Patch Results</STRONG> analysis to see specifics if the fixlet action fails.  Detailed logs can be found in the /var/opt/BESClient/ORACLE folder.</FONT></P>]]></Description>
		<Relevance>name of operating system starts with "SunOS"</Relevance>
    <Relevance>architecture of operating system starts with "sparc"</Relevance>
		<Relevance>exists file "SIDLIST.txt" whose (exists line whose (it does not start with "+ASM" and it contains ":19.0.0.0:") of it and not exists line whose (it starts with "+ASM" and it contains ":19.0.0.0:") of it) of folder "ORACLE" of parent folder of data folder of client</Relevance>
		<Relevance>exists file "PATCHLEVEL-19.0.0.0.txt" whose (not exists line whose (it >= "2024-07") of it) of folder "ORACLE" of parent folder of data folder of client</Relevance>
		<Category>Database</Category>
		<DownloadSize>2164090878</DownloadSize>
		<Source>Oracle</Source>
		<SourceID>p36522340</SourceID>
		<SourceReleaseDate>2024-07-15</SourceReleaseDate>
		<SourceSeverity>Critical</SourceSeverity>
		<CVENames></CVENames>
		<SANSID></SANSID>
		<MIMEField>
			<Name>x-fixlet-modification-time</Name>
			<Value>Mon, 01 Apr 2024 12:00:00 +0000</Value>
		</MIMEField>
		<Domain>BESC</Domain>
		<DefaultAction ID="Action1">
			<Description>
				<PreLink>Click </PreLink>
				<Link>here</Link>
				<PostLink> to deploy this action.</PostLink>
			</Description>
			<ActionScript MIMEType="application/x-Fixlet-Windows-Shell"><![CDATA[
parameter "ODIR"="{ pathname of folder "ORACLE" of parent folder of data folder of client }"
parameter "BASE"="{ (if it != "" then it else ((parameter "ODIR") & "/patchfiles")) of ((value of setting "ORACLE_PATCH_FOLDER" of client)|"") }"

// Create the patches base folder if needed
if { not exists folder (parameter "BASE") }
  folder create {parameter "BASE"}
  wait chmod 777 {parameter "BASE"}
endif

// Set up for non-BigFix-native downloading if needed
if { ((value of setting "ORACLE_DOWNLOAD_CURL" of client)|"0") = "1" }
  parameter "downloader"="{ tuple string item 0 of concatenation ", " of pathnames of files ("curl";"wget") of folders ("/usr/xpg4/bin";"/sbin";"/bin";"/usr/sbin";"/usr/bin";"/usr/local/sbin";"/usr/local/bin") | "" }"
  // Verify curl or wget is available
  continue if { parameter "downloader" != "" }
  parameter "DOWNLOAD"="{ "cd " & (parameter "BASE") & " ; " & (parameter "downloader") & " " & (if parameter "downloader" ends with "curl" then ("--retry 5 --retry-delay 30 -O") else ("--tries=5 --wait=30")) }"
endif

// Download the OPatch file if needed
if { not exists files "p6880880_190000_SOLARIS64.zip" whose (size of it = 85262071 and sha1 of it = "644bd2cfb4bd532c27770f84643ee9406aed31a2") of folders (parameter "BASE") }
  delete {parameter "BASE"}/p6880880_190000_SOLARIS64.zip
  if { ((value of setting "ORACLE_DOWNLOAD_CURL" of client)|"0") != "1" }
    prefetch p6880880_190000_SOLARIS64.zip sha1:644bd2cfb4bd532c27770f84643ee9406aed31a2 size:85262071 http://LOCALHOST:52311/Uploads/ORACLE/2024-07/OPatch/p6880880_190000_SOLARIS64.zip sha256:b6abc63652e0ff987fff437372f1ae7d4f137373d903e464dd8a9c8972c37b02
    move __Download/p6880880_190000_SOLARIS64.zip {parameter "BASE"}/p6880880_190000_SOLARIS64.zip
  else
    wait bash -c "{parameter "DOWNLOAD"} { (preceding text of first "LOCALHOST" of it & host name of root server & following text of first "LOCALHOST" of it) of "http://LOCALHOST:52311/Uploads/ORACLE/2024-07/OPatch/p6880880_190000_SOLARIS64.zip" } > {parameter "ODIR"}/DOWNLOAD.log 2>&1"
    wait bash -c "chmod 766 {parameter "ODIR"}/DOWNLOAD.log"
    // Verify the OPatch file was downloaded successfully
    continue if { exists files "p6880880_190000_SOLARIS64.zip" whose (size of it = 85262071 and sha1 of it = "644bd2cfb4bd532c27770f84643ee9406aed31a2") of folders (parameter "BASE") }
  endif
endif

// Download the PSU/OJVM patch file if needed
if { not exists folders "36522340" of folders (parameter "BASE") AND not exists files "p36522340_190000_SOLARIS64.zip" whose (size of it = 2078828807 and sha1 of it = "215c32ef9d697ecb6dc930e955948153bd2943bd") of folders (parameter "BASE") }
  delete {parameter "BASE"}/p36522340_190000_SOLARIS64.zip
  if { ((value of setting "ORACLE_DOWNLOAD_CURL" of client)|"0") != "1" }
    prefetch p36522340_190000_SOLARIS64.zip sha1:215c32ef9d697ecb6dc930e955948153bd2943bd size:2078828807 http://LOCALHOST:52311/Uploads/ORACLE/2024-07/SDB/p36522340_190000_SOLARIS64.zip sha256:3b7eca335835511a14d38fa3077d0af477aec2cf9fd63b8048aacc238ff6b8e7
    move __Download/p36522340_190000_SOLARIS64.zip {parameter "BASE"}/p36522340_190000_SOLARIS64.zip
  else
    wait bash -c "{parameter "DOWNLOAD"} { (preceding text of first "LOCALHOST" of it & host name of root server & following text of first "LOCALHOST" of it) of "http://LOCALHOST:52311/Uploads/ORACLE/2024-07/SDB/p36522340_190000_SOLARIS64.zip" } > {parameter "ODIR"}/DOWNLOAD.log 2>&1"
    wait bash -c "chmod 766 {parameter "ODIR"}/DOWNLOAD.log"
    // Verify the PSU/OJVM patch file was downloaded successfully
    continue if { exists files "p36522340_190000_SOLARIS64.zip" whose (size of it = 2078828807 and sha1 of it = "215c32ef9d697ecb6dc930e955948153bd2943bd") of folders (parameter "BASE") }
  endif
endif

// Unzip the PSU/OJVM patch file (and remove it) if needed
if { not exists folders "36522340" of folders (parameter "BASE") }
  wait bash -c "cd {parameter "BASE"} ; unzip -q -o p36522340_190000_SOLARIS64.zip > {parameter "ODIR"}/UNZIP.log 2>&1"
  wait bash -c "chmod 766 {parameter "ODIR"}/UNZIP.log"
  wait bash -c "chmod -R 777 {parameter "BASE"}"
  // Verify the patch was unzipped into the staging folder
  continue if { exists folder "36522340" of folder (parameter "BASE") }
  delete {parameter "BASE"}/p36522340_190000_SOLARIS64.zip
  delete {parameter "BASE"}/PatchSearch.xml
endif

// Capture local settings for scripts
createfile until _EOF_
PATCHID="36522340"
PATCHPSU="36582781"
PATCHJVM="36414915"
OPATCHFILE="p6880880_190000_SOLARIS64.zip"
OPATCHVER="12.2.0.1.43"
BASEFOLDER="{parameter "BASE"}"
OUTFOLDER="{parameter "ODIR"}"
SKIP_PRECHECK="{ (value of setting "ORACLE_SKIP_PRECHECK" of client)|"0" }"
ALLOW_CONFLICTS="{ (value of setting "ORACLE_ALLOW_CONFLICTS" of client)|"0" }"
ALLOW_INVALIDS="{ (value of setting "ORACLE_ALLOW_INVALIDS" of client)|"0" }"
ORACLE_BACKUP="{ (value of setting "ORACLE_BACKUP_FOLDER" of client)|"" }"
_EOF_
delete "{parameter "ODIR"}/INCLUDE-19.0.0.0.sh"
move __createfile "{parameter "ODIR"}/INCLUDE-19.0.0.0.sh"
wait chmod 755 "{parameter "ODIR"}/INCLUDE-19.0.0.0.sh"

// Pre-create the patch log and make it accessible to all users
wait bash -c "touch {parameter "ODIR"}/PATCH-19.0.0.0.log ; chmod 766 {parameter "ODIR"}/PATCH-19.0.0.0.log"

// Run the patch script and capture its exit code
wait bash -c "export ORACLE_VER=19.0.0.0; {parameter "ODIR"}/PATCH.sh > {parameter "ODIR"}/PATCH-19.0.0.0.log 2>&1"
parameter "exitcode"="{ exit code of action | 66 }"
wait bash -c "chmod 766 {parameter "ODIR"}/*.log"

// Rotate the log and write the operation status to a file for reporting
wait bash -c "{parameter "ODIR"}/LOGROTATE.sh 180 PATCH-19.0.0.0"
wait bash -c "{parameter "ODIR"}/STATUS.sh 19.0.0.0 2024-07 PATCH {parameter "exitcode"}"
wait bash -c "{parameter "ODIR"}/UPDATE.sh > {parameter "ODIR"}/UPDATE.log 2>&1"
wait bash -c "chmod 766 {parameter "ODIR"}/*.log"

// Set the action exit code and fail the action if the exit code isn't zero
if { parameter "exitcode" != "0" }
  exit {parameter "exitcode"}
endif
exit {parameter "exitcode"}
]]></ActionScript>
		</DefaultAction>
	</Fixlet>
</BES>
